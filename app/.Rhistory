shiny::runApp()
runApp()
runApp()
?removeMarker
runApp()
runApp()
load("../output/markets.RData")
View(markets)
?removeLayersControl
?removeLaye
?removeLayer
runApp()
<<<<<<< HEAD
markets<- markets[(markets$Square.Footage>=2000)&(markets$City=="NEW YORK"), ]
markets<- read.csv("../data/markets.csv",header=TRUE, stringsAsFactors =FALSE)
markets<- subset(markets, !is.na(longitude))
markets<- markets[(markets$Square.Footage>=1000)&(markets$City=="NEW YORK"), ]
markets<- markets[(markets$Square.Footage>=1500)&(markets$City=="NEW YORK"), ]
save(markets, file="../output/markets.RData")
load("../output/markets.RData")
runApp()
shiny::runApp()
getwd()
runApp()
restaurant=read.csv("../data/restaurant_data.csv",header=TRUE, stringsAsFactors =FALSE)
runApp()
restaurant
runApp()
save(markets, file="../output/restaurants.RData")
save(restaurants, file="../output/restaurants.RData")
restaurant=read.csv("../data/restaurant_data.csv",header=TRUE, stringsAsFactors =FALSE)
save(restaurants, file="../output/restaurants.RData")
save(restaurant, file="../output/restaurants.RData")
load("/output/restaurants.RData")
load("../output/restaurants.RData")
runApp()
View(restaurant)
runApp()
View(restaurant)
save(restaurant, file="../output/restaurant.RData")
load("../output/restaurant.RData")
runApp()
markets<- read.csv("../data/markets.csv",header=TRUE, stringsAsFactors =FALSE)
?type
type(markets$latitude)
sapply(restaurant$lon,class)
sapply(markets$latitude,class)
runApp()
?checkGroupInput
?checkboxGroupInput
checkboxInput()
?checkboxInput
runApp()
?removeMarker
?addMarkers
runApp()
?removeMarker
runApp()
?addAwesomeMarkers
runApp()
?addMarkers
View(markets)
runApp()
shiny::runApp()
=======
>>>>>>> origin/master
load("../output/markets.RData")
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
housing<- read.csv("../data/truliaRentPrice/housing_geo.csv",header=TRUE, stringsAsFactors =FALSE)
View(housing)
housing<- read.csv("../data/truliaRentPrice/housing_geo.csv",header=TRUE, stringsAsFactors =FALSE)
View(housing)
housing<-subset(housing,!is.na(lng))
save(housing, file="../output/housing.RData")
load("../output/housing.RData")
View(housing)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(markets)
runApp()
?addCircleMarkers
runApp()
View(housing)
runApp()
shiny::runApp()
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
load("../output/housing.RData")
View(housing)
housing
View(markets)
View(restaurant)
runApp()
runApp('D:/expedia_map')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
proxy<-leafletProxy("map")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp()
runApp()
View(markets)
View(markets)
runApp()
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp('D:/pinren_document/CU/semester2/learnshiny/expedia_map')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
housing
runApp()
runApp()
housing<- read.csv("../data/truliaRentPrice/housing_geo.csv",header=TRUE, stringsAsFactors =FALSE)
housing<- subset(housing, !is.na(lng))
save(housing, file="../output/markets.RData")
save(housing, file="../output/housing.RData")
markets<- read.csv("../data/markets.csv",header=TRUE, stringsAsFactors =FALSE)
markets<- subset(markets, !is.na(longitude))
markets<- markets[(markets$Square.Footage>=1500)&(markets$City=="NEW YORK"), ]
save(markets, file="../output/markets.RData")
load("../output/housing.RData")
?observe
map <- renderLeaflet({
leaflet() %>%
addProviderTiles('Esri.WorldTopoMap') %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12)
})
map
print(map)
map=leaflet() %>%
addProviderTiles('Esri.WorldTopoMap') %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12)
map
map%>%addCircleMarkers(data=housing,lng=~lng,lat=~lat,
radius=1.5,
color="red",
stroke=FALSE,
fillOpacity = 0.5
)
leafletProxy()
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
load("../output/housing.RData")
shiny::runApp()
load("../output/housing.RData")
View(housing)
load("../output/markets.RData")
housing<- read.csv("../data/truliaRentPrice/housing_geo.csv",header=TRUE, stringsAsFactors =FALSE)
load("../output/markets.RData")
housing<- subset(housing, !is.na(lng))
save(housing, file="../output/housing.RData")
load("../output/markets.RData")
load("../output/restaurant.RData")
load("../output/sub.station.RData")
load("../output/bus.stop.RData")
load("../output/housing.RData")
runApp()
runApp()
runApp()
?markerClusterOptions
runApp()
runApp()
?removeMarker
runApp()
runApp()
?layersControlOptions
runApp()
runApp()
runApp()
runApp()
View(housing)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?addMarkers
?icon
?makeIcon
runApp()
?labelOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?labelOptions
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< Updated upstream
=======
shiny::runApp()
?addMarkers
runApp()
?searchMarkersOptions
runApp()
?sidebarSearchForm
runApp()
?selectizeInput
runApp()
runUrl("http://www.fabioveronesi.net/ShinyApp/InterfacingRGoogleMaps.zip")
install.packages("googleway")
?google-map
?google_map
install.packages("RgoogleMaps")
library(RgoogleMaps)
library(googleway)
?`google_map-shiny`
runApp()
?google_places
runApp()
?sidebarSearchForm
runApp()
mykey <- 'AIzaSyDlTOvfMvbOweAFzh1duePOQ7CPJ_AFedI'
google_places(search_string = "housing in Manhattan", key=mykey)
runApp()
mykey <- AIzaSyBS5pz88s7SQIfysc1GQSdxHLzUNQhKC00
mykey <- 'AIzaSyBS5pz88s7SQIfysc1GQSdxHLzUNQhKC00'
google_places(search_string = "housing in Manhattan", key=mykey)
runApp()
?google_map
runApp()
View(markets)
View(restaurant)
runApp()
?addMarkers
runApp()
shiny::runApp()
runApp()
>>>>>>> Stashed changes
shiny::runApp()
runApp()
?fluidRow
runApp()
?textInput
runApp()
?observeEvent
?setView
runApp()
geocodeAddreess("x")
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
geocodeAddreess("x")
geocodeAdddress("x")
runApp()
geocodeAdddress("x")
?observeEvent
?observe
runApp()
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
geocodeAdddress("time square")
runApp()
geocodeAdddress <- function(address) {
require(RJSONIO)
url <- "http://maps.google.com/maps/api/geocode/json?address="
url <- URLencode(paste(url, address, "&sensor=false", sep = ""))
x <- fromJSON(url, simplify = FALSE)
if (x$status == "OK") {
out <- c(x$results[[1]]$geometry$location$lng,
x$results[[1]]$geometry$location$lat)
} else {
out <- NA
}
Sys.sleep(0.2)  # API only allows 5 requests per second
out
}
geocodeAdddress("time square")
runApp()
?fluidRow
runApp()
actionButton()
?actionButton
?icons
runApp()
?fluidRow
runApp()
actionButton()
?actionButton
runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
?dropdownButton
runApp()
?column
?div
runApp()
?wellPanel
runApp()
?actionButton
runApp()
?xmlRoot
install.packages("xml")
install.packages("XML")
runApp()
?actionButton
runApp()
?column
runApp()
?leafOutput
?leafletOutput
runApp()
?div
install.packages("htmltools")
library(htmltools)
?div
shiny::runApp()
?dropdownButton
runApp()
?checkboxGroupButtons
runApp()
?checkboxInput
runApp()
?dropdownMenu
?dropdown
runApp()
?selectInput
runApp()
?selectInput
runApp()
?sequence
?seq
runApp()
?dropdownButton
runApp()
?actionButton
runApp()
?tags
runApp()
?dropdownButton
runApp()
dropdownButton()
runApp()
?addMarkers
runApp()
?checkboxInput
runApp()
?addLayersControl
runApp()
?updateTextInput
runApp()
load("../output/restaurant.RData")
View(restaurant)
runApp()
?shinytheme
runApp()
